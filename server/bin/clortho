#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path = require('path');

 // ./server is our current working directory
process.chdir(path.dirname(__dirname));

const config = require('../lib/configuration'),
      crypto = require("crypto"),
      express = require("express"),
      fs = require("fs"),
      http = require("http"),
      i18n = require('i18n-abide'),
      routes = require("../routes").routes()
      sessions = require("client-sessions"),
      util = require("util");

process.on('uncaughtException', function(err) {
  console.error('uncaught exception', err);
});

// TODO unknown email address
// TODO Add Winston
// TODO add statsd

var app, options = {};

app = express.createServer();

app.configure('development', function () {
  app.use(express.responseTime());
  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));
});

app.configure('production', function(){
  app.use(express.errorHandler());
});

app.configure(function(){
  app.set('views', path.join(process.cwd(), 'views'));
  app.set('view engine', 'ejs');
  app.use(express.logger());

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  var sess_config = config.get('client_sessions');
  app.use(sessions({
    cookieName: sess_config.cookie_name,
    secret: sess_config.secret,
    duration: sess_config.duration, // 1 day
    cookie: {
      maxAge: 14 * 24 * 60 * 60 * 1000 // 2 weeks
    }
  }));

  app.use(express.csrf());

  app.use(i18n.abide({
    supported_languages: config.get('supported_languages'),
    default_lang: config.get('default_lang'),
    debug_lang: config.get('debug_lang'),
    locale_directory: config.get('locale_directory')
  }));

  app.use(function (req, resp, next) {
    resp.local('csrf_token', req.session._csrf);
    resp.local('browserid_server', config.get('browserid_server'));
    var s = req.session || null;
    resp.local('session', s);

    // static_mount_path support, allows for putting all static files under
    // a specific url mount path
    // In practise... our IT team will always set this to /browserid, so there are
    // Two top level paths:
    // 1) /.well-known/browserid
    // 2) /browserid/*
    // So static files and express routes live under /browserid and we strip it from the url
    var static_mount_path = config.get('static_mount_path');
    resp.local('static_mount_path', static_mount_path);
    if (req.url.indexOf(static_mount_path) === 0) {
      req.url = req.url.replace(static_mount_path, '');
    }
    if (req.url[0] !== '/') {
      req.url = '/' + req.url;
    }
    next();
  });

  app.use(app.router);

  // .well-known file must be served with a content-type of application/json
  app.use(function (req, resp, next) {
    if ('/.well-known/browserid' === req.url) {
      resp.setHeader('Content-Type', 'application/json');
      resp.setHeader('Last-Modified', routes.well_known_last_mod);
    }
    next();
  });

  app.get('/', function (req, resp) {
    resp.render('home', {title: 'Testing homepage'});
  });

  app.get('/.well-known/browserid', routes.well_known_browserid);

  app.get('/provision', routes.provision);
  app.post('/provision', routes.provision_key);

  app.get('/sign_in', routes.signin_from_form);
  app.post('/sign_in', routes.check_signin_from_form);

  // Dev and Stage only
  app.get('/signout', routes.signout);

  // Static
  var static_dir = path.join(process.cwd(), '..', 'static');
  app.use(express.compiler({ enable: ['less'],
                             src: '../static'}
));

app.use(express.static(static_dir));

app.use(function (req, resp, next) {
    routes.handle404(req, resp);
  });
});

function startup(cb) {
  app.listen(config.get('http_port'), "127.0.0.1", function(err) {
    if (cb) cb(err, app.address());
  });
}

// Startup
if (process.argv[1] === __filename) {
  // command line invocation
  startup(function(err, address) {
    console.log(util.format("running on http://%s:%s",
                            address.address, address.port));
  });
} else {
  exports.startup = startup;
}

