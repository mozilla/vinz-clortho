#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const path = require('path');

 // ./server is our current working directory
process.chdir(path.dirname(__dirname));

const config = require('../lib/configuration'),
      crypto = require('crypto'),
      express = require('express'),
      fs = require('fs'),
      http = require('http'),
      i18n = require('i18n-abide'),
      routes = require('../routes').routes(),
      sessions = require('client-sessions'),
      statsd = require('../lib/statsd'),
      util = require('util'),
      logger = require('../lib/logging').logger,
      font_middleware = require("connect-fonts"),
      opensans = require("connect-fonts-opensans");

// log uncaught exceptions
process.on('uncaughtException', function(err) {
  if (statsd) statsd.increment('server.uncaught_exception');
  logger.error(err.stack || err);
});

var app;

app = express.createServer();

app.use(express.errorHandler());

app.set('views', path.join(process.cwd(), 'views'));
app.set('view engine', 'ejs');

// send web log messages to our logging abstraction
app.use(express.logger({
  stream: {
    write: function(message){
      // trim newlines as our logger inserts them for us.
      if (typeof message === 'string') message = message.trim();
      logger.info(message);
    }
  }
}));

app.use(express.bodyParser());
app.use(express.methodOverride());

var sess_config = config.get('client_sessions');
app.use(function(req, res, next) {
  // We will always be deployed behind an SSL terminator.  This
  // flag tells client-sessions that it's ok to send cookies which
  // will only be returned over SSL.
  req.connection.proxySecure = true;
  next();
});

if (config.get('local_development')) {
  logger.warn("Running with insecure cookies, no appropriate for production");
}

app.use(sessions({
  cookieName: sess_config.cookie_name,
  secret: sess_config.secret,
  duration: sess_config.duration_ms,
  cookie: {
    maxAge: sess_config.duration_ms,
    httpOnly: true,
    // only allow non-secure cookies during local development
    secure: !config.get('local_development')
  }
}));

app.use(font_middleware.setup({
  fonts: [ opensans ],
  ua: "all",
  maxage: 180 * 24 * 60 * 60 * 1000,   // 180 days
  compress: true,
  allow_origin: "*"
}));

app.use(express.csrf());

app.use(i18n.abide({
  supported_languages: config.get('supported_languages'),
  default_lang: config.get('default_lang'),
  debug_lang: config.get('debug_lang'),
  locale_directory: config.get('locale_directory')
}));

app.use(function(req, res, next) {
  res.local('csrf_token', req.session._csrf);
  res.local('browserid_server', config.get('browserid_server'));
  var s = req.session || null;
  res.local('session', s);

  next();
});

app.get('/.well-known/browserid', routes.well_known_browserid);

app.get('/', routes.signin_from_form);
app.get('/sign_in', routes.signin_from_form);
app.post('/sign_in', routes.check_signin_from_form);

app.get('/provision', routes.provision);
app.post('/provision', routes.provision_key);

// Monitoring to make sure things are working OK
app.get('/node_status', routes.elb_check);
app.get('/ldap_status', routes.checkStatus);

// Dev and Stage only
app.get('/signout', routes.signout);

// API, currently used only for testing, maybe we'll grow this into more
app.get('/api/session_context', routes.session_context);

// Static
var static_dir = path.join(process.cwd(), '..', 'static');
app.use(express.compiler({ enable: ['less'],
                           src: '../static'}
                        ));

app.use(express.static(static_dir));

app.use(routes.handle404);

function startup(cb) {
  app.listen(config.get('http_port'), config.get('http_address'), function(err) {
    statsd.increment('server.started');
    if (cb) cb(err, app.address());
  });
}

// allow clortho to be invoked from the command line or as a library
if (process.argv[1] === __filename) {
  // command line invocation
  startup(function(err, address) {
    logger.info(util.format("running on http://%s:%s",
                            address.address, address.port));
  });
} else {
  exports.startup = startup;
}

